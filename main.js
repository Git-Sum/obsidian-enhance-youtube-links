/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EnhanceYouTubeLinksPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  includeExtraMetadata: false,
  includeChannelName: true,
  includeChannelURL: true,
  includeChannelThumbnail: true,
  combineChannelNameAndURL: false
};
var lineCount = 1;
var indentLevel = 0;
var EnhanceYouTubeLinksPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const urlBase = "https://www.youtube.com/oembed?url=";
    this.addRibbonIcon("play", "Get YT Data", (evt) => {
      var _a;
      const editor = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.editor;
      if (editor) {
        const textSelected = editor.getSelection();
        const line = editor.getCursor().line;
        const lineSelected = editor.getLine(line);
        indentLevel = this.getIndentLevel(lineSelected);
        if ((textSelected == null ? void 0 : textSelected.startsWith("https://www.youtube.com")) || (textSelected == null ? void 0 : textSelected.startsWith("www.youtube.com")) || (textSelected == null ? void 0 : textSelected.startsWith("youtube.com"))) {
          const urlFinal = urlBase + textSelected;
          (0, import_obsidian.requestUrl)(urlFinal).then(
            (response) => {
              const data = response.json;
              let urlTitle = this.buildTitle(data, textSelected);
              let result;
              result = lineSelected.replace(textSelected, urlTitle);
              if (this.settings.includeExtraMetadata) {
                result += this.buildMetadata(data);
              }
              editor.setLine(line, result);
              if (this.settings.includeExtraMetadata) {
                editor.setCursor(line + lineCount, 0);
              } else {
                editor.setCursor(line, lineSelected.indexOf(textSelected) + urlTitle.length);
              }
              this.resetVariables();
            }
          );
        }
      }
    });
    this.addSettingTab(new EnhanceYouTubeLinksSettingTab(this.app, this));
  }
  resetVariables() {
    lineCount = 1;
    indentLevel = 0;
  }
  getIndent() {
    if (indentLevel <= 0) {
      return "";
    } else {
      return "	".repeat(indentLevel);
    }
  }
  getIndentLevel(lineText) {
    const matchString = "(	)";
    const matches = lineText.match(matchString);
    if (matches && matches.length > 0) {
      return matches.length;
    } else {
      return 0;
    }
  }
  buildMetadata(data) {
    let authorName;
    let authorURL;
    let thumbnailURL;
    let result;
    result = "";
    if (this.settings.includeChannelName && this.settings.includeChannelURL) {
      result += "\n" + this.getIndent() + "	Channel:";
      authorName = data.author_name;
      authorURL = data.author_url;
      result += "\n" + this.getIndent() + "		[" + authorName + "](" + authorURL + ")";
      lineCount += 2;
    } else {
      if (this.settings.includeChannelName) {
        result += "\n" + this.getIndent() + "	Channel:";
        authorName = data.author_name;
        result += "\n" + this.getIndent() + "		" + authorName;
        lineCount += 2;
      }
      if (this.settings.includeChannelURL) {
        result += "\n" + this.getIndent() + "	Channel URL:";
        authorURL = data.author_url;
        result += "\n" + this.getIndent() + "		" + authorURL;
        lineCount += 2;
      }
    }
    if (this.settings.includeChannelThumbnail) {
      result += "\n" + this.getIndent() + "	Thumbnail:";
      thumbnailURL = data.thumbnail_url;
      result += "\n" + this.getIndent() + "		![](" + thumbnailURL + ")";
      lineCount += 2;
    }
    return result;
  }
  buildTitle(data, url) {
    let title;
    let titleURL;
    title = data.title;
    titleURL = "[" + title.replace("[", "").replace("]", "") + "](" + url + ")";
    return titleURL;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var EnhanceYouTubeLinksSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Add extra metadata").setDesc("Channel Name, Channel URL, Thumbnail").addToggle((cb) => {
      cb.setValue(this.plugin.settings.includeExtraMetadata);
      cb.onChange(async (value) => {
        this.plugin.settings.includeExtraMetadata = value;
        await this.plugin.saveSettings();
        this.display();
      });
    });
    if (this.plugin.settings.includeExtraMetadata) {
      new import_obsidian.Setting(containerEl).setName("Channel Name").addToggle((cb) => {
        cb.setValue(this.plugin.settings.includeChannelName);
        cb.onChange(async (value) => {
          this.plugin.settings.includeChannelName = value;
          await this.plugin.saveSettings();
          this.display();
        });
      });
      new import_obsidian.Setting(containerEl).setName("Channel URL").addToggle((cb) => {
        cb.setValue(this.plugin.settings.includeChannelURL);
        cb.onChange(async (value) => {
          this.plugin.settings.includeChannelURL = value;
          await this.plugin.saveSettings();
          this.display();
        });
      });
      if (this.plugin.settings.includeChannelName && this.plugin.settings.includeChannelURL) {
        new import_obsidian.Setting(containerEl).setName("Combine Channel Name and Channel URL").addToggle((cb) => {
          cb.setValue(this.plugin.settings.combineChannelNameAndURL);
          cb.onChange(async (value) => {
            this.plugin.settings.combineChannelNameAndURL = value;
            await this.plugin.saveSettings();
            this.display();
          });
        });
      }
      new import_obsidian.Setting(containerEl).setName("Thumbnail").addToggle((cb) => {
        cb.setValue(this.plugin.settings.includeChannelThumbnail);
        cb.onChange(async (value) => {
          this.plugin.settings.includeChannelThumbnail = value;
          await this.plugin.saveSettings();
        });
      });
    }
  }
};
